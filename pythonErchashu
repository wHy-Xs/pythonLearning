'''
所谓二叉树的遍历，就是把二叉树的所有树节点依次输出，每个节点只输出一次，且所有节点都被输出。
我们常见的遍历方式一共是四种：前序遍历，中序遍历，后序遍历，以及层次遍历。
先说深度优先遍历。前序遍历，中序遍历，后序遍历，不同之处在于输出节点的顺序，具体的：
1. 前序(pre-order)：先根后左再右
2. 中序(in-order)：先左后根再右
3. 后序(post-order)：先左后右再根
'''
1.1前序遍历的非递归方法
def preorderTraversal(self, root):  
        result = []  
        stack = []  
        # 也可写成 if root:  
        if root != None:  
            stack.append(root)  
        while len(stack) != 0:  
            cur = stack.pop()  
            result.append(cur.val)  
            if cur.right != None:  
                stack.append(cur.right)  
            if cur.left != None:  
                stack.append(cur.left)  
        return result  
''' 
思路：用栈的思想实现了前序遍历
1. stack存储当前节点，一开始，当然是根节点A，stack = [A]
2. 删除stack的栈顶元素，将栈顶元素所存储的值加入到最后我们要的结果列表里面
3. 如果被删除的元素有右孩子，将右孩子加入stack，stack = [C]
4. 如果被删除的元素有左孩子，将左孩子加入stack，stack = [C,B]
可以看出，由于右孩子先加入，所以再把这个新的栈从第一步开始迭代时，就会先处理左孩子（图中的B），
以此类推，处理左孩子时，又会先删除该节点（B），再加入该节点（B）的右孩子：stack = [C,E]，最后加入左孩子：stack = [C,E,D]...
'''
2.1中序遍历非递归方法
def inorderTraversal(self, root):  
        result = []  
        stack = []  
        cur = root  
        while cur or len(stack) != 0:  
            # 不处理，一直向左深入  
            if cur:  
                stack.append(cur)  
                cur = cur.left  
            # 深入到头了，回溯，输出值，再遍历右侧  
            else:  
                cur = stack.pop()  
                result.append(cur.val)  
                cur = cur.right  
        return result  
'''
1. 从根节点A开始，只要当前节点非空，将当前节点加入stack，stack = [A]
2. 只要当前节点有左孩子，就令当前节点为他的左孩子，并加入stack，直到没有左孩子为止。此时，stack = [A,B,D]
3. 一旦当前节点没有左孩子了，就取出栈顶元素，访问，并令当前节点为这个元素的右孩子
将上面的步骤迭代，就可以最终得到中序遍历的结果。因为逻辑上始终执行的是“左-根-右
'''

3.1后序遍历
def postorderTraversal(self, root):  
        result = []  
        stack = []  
        # 用pre记录上一次访问的节点，初始时为空  
        cur, pre = None, None  
        if root:  
            stack.append(root)  
        while len(stack) != 0:  
            # 取出栈顶节点，做检测  
            cur = stack[-1]  
            # 只要满足：1. 是叶子；2. 是回溯的；其中之一，则访问  
            if cur.left == cur.right == None or (pre is not None and (pre == cur.left or pre == cur.right)):  
                result.append(cur.val)  
                stack.pop()  
                pre = cur  
            # 如果检测结果不满足上述两个条件，继续按照先右后左的顺序插入值  
            else:  
                if cur.right:  
                    stack.append(cur.right)  
                if cur.left:  
                    stack.append(cur.left)  
        return result  
