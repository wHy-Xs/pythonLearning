'''
所谓二叉树的遍历，就是把二叉树的所有树节点依次输出，每个节点只输出一次，且所有节点都被输出。
我们常见的遍历方式一共是四种：前序遍历，中序遍历，后序遍历，以及层次遍历。
先说深度优先遍历。前序遍历，中序遍历，后序遍历，不同之处在于输出节点的顺序，具体的：
1. 前序(pre-order)：先根后左再右
2. 中序(in-order)：先左后根再右
3. 后序(post-order)：先左后右再根
'''
1.1前序遍历的非递归方法
def preorderTraversal(self, root):  
        result = []  
        stack = []  
        # 也可写成 if root:  
        if root != None:  
            stack.append(root)  
        while len(stack) != 0:  
            cur = stack.pop()  
            result.append(cur.val)  
            if cur.right != None:  
                stack.append(cur.right)  
            if cur.left != None:  
                stack.append(cur.left)  
        return result  
''' 
思路：用栈的思想实现了前序遍历
1. stack存储当前节点，一开始，当然是根节点A，stack = [A]
2. 删除stack的栈顶元素，将栈顶元素所存储的值加入到最后我们要的结果列表里面
3. 如果被删除的元素有右孩子，将右孩子加入stack，stack = [C]
4. 如果被删除的元素有左孩子，将左孩子加入stack，stack = [C,B]
可以看出，由于右孩子先加入，所以再把这个新的栈从第一步开始迭代时，就会先处理左孩子（图中的B），
以此类推，处理左孩子时，又会先删除该节点（B），再加入该节点（B）的右孩子：stack = [C,E]，最后加入左孩子：stack = [C,E,D]...
'''
2.1中序遍历非递归方法
def inorderTraversal(self, root):  
        result = []  
        stack = []  
        cur = root  
        while cur or len(stack) != 0:  
            # 不处理，一直向左深入  
            if cur:  
                stack.append(cur)  
                cur = cur.left  
            # 深入到头了，回溯，输出值，再遍历右侧  
            else:  
                cur = stack.pop()  
                result.append(cur.val)  
                cur = cur.right  
        return result  
'''
1. 从根节点A开始，只要当前节点非空，将当前节点加入stack，stack = [A]
2. 只要当前节点有左孩子，就令当前节点为他的左孩子，并加入stack，直到没有左孩子为止。此时，stack = [A,B,D]
3. 一旦当前节点没有左孩子了，就取出栈顶元素，访问，并令当前节点为这个元素的右孩子
将上面的步骤迭代，就可以最终得到中序遍历的结果。因为逻辑上始终执行的是“左-根-右
'''

3.1后序遍历
def postorderTraversal(self, root):  
        result = []  
        stack = []  
        # 用pre记录上一次访问的节点，初始时为空  
        cur, pre = None, None  
        if root:  
            stack.append(root)  
        while len(stack) != 0:  
            # 取出栈顶节点，做检测  
            cur = stack[-1]  
            # 只要满足：1. 是叶子；2. 是回溯的；其中之一，则访问  
            if cur.left == cur.right == None or (pre is not None and (pre == cur.left or pre == cur.right)):  
                result.append(cur.val)  
                stack.pop()  
                pre = cur  
            # 如果检测结果不满足上述两个条件，继续按照先右后左的顺序插入值  
            else:  
                if cur.right:  
                    stack.append(cur.right)  
                if cur.left:  
                    stack.append(cur.left)  
        return result  
  ＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
  #coding=utf-8

class Node(object):
    """节点类"""
    def __init__(self, elem=-1, lchild=None, rchild=None):
        self.elem = elem
        self.lchild = lchild
        self.rchild = rchild


class Tree(object):
    """树类"""
    def __init__(self):
        self.root = Node()


    def add(self, elem):
        """为树添加节点"""
        node = Node(elem)
        if self.root.elem == -1:            #如果树是空的，则对根节点赋值
            self.root = node
        else:                     
            myQueue = []
            treeNode = self.root
            myQueue.append(treeNode)
            while myQueue:                      #对已有的节点进行层次遍历
                treeNode = myQueue.pop(0)
                if treeNode.lchild == None:
                    treeNode.lchild = node
                    return
                elif treeNode.rchild == None:
                    treeNode.rchild = node
                    return
                else:
                    myQueue.append(treeNode.lchild)
                    myQueue.append(treeNode.rchild)


    def front_digui(self, root):
        """利用递归实现树的先序遍历"""
        if root == None:
            return
        print root.elem,
        self.front_digui(root.lchild)
        self.front_digui(root.rchild)


    def middle_digui(self, root):
        """利用递归实现树的中序遍历"""
        if root == None:
            return
        self.middle_digui(root.lchild)
        print root.elem,
        self.middle_digui(root.rchild)


    def later_digui(self, root):
        """利用递归实现树的后序遍历"""
        if root == None:
            return
        self.later_digui(root.lchild)
        self.later_digui(root.rchild)
        print root.elem,


    def front_stack(self, root):
        """利用堆栈实现树的先序遍历"""
        if root == None:
            return
        myStack = []
        node = root
        while node or myStack:
            while node:                     #从根节点开始，一直找它的左子树
                print node.elem,
                myStack.append(node)
                node = node.lchild
            node = myStack.pop()            #while结束表示当前节点node为空，即前一个节点没有左子树了
            node = node.rchild                  #开始查看它的右子树


    def middle_stack(self, root):
        """利用堆栈实现树的中序遍历"""
        if root == None:
            return
        myStack = []
        node = root
        while node or myStack:
            while node:                     #从根节点开始，一直找它的左子树
                myStack.append(node)
                node = node.lchild
            node = myStack.pop()            #while结束表示当前节点node为空，即前一个节点没有左子树了
            print node.elem,
            node = node.rchild                  #开始查看它的右子树


    def later_stack(self, root):
        """利用堆栈实现树的后序遍历"""
        if root == None:
            return
        myStack1 = []
        myStack2 = []
        node = root
        myStack1.append(node)
        while myStack1:                   #这个while循环的功能是找出后序遍历的逆序，存在myStack2里面
            node = myStack1.pop()
            if node.lchild:
                myStack1.append(node.lchild)
            if node.rchild:
                myStack1.append(node.rchild)
            myStack2.append(node)
        while myStack2:                         #将myStack2中的元素出栈，即为后序遍历次序
            print myStack2.pop().elem,


    def level_queue(self, root):
        """利用队列实现树的层次遍历"""
        if root == None:
            return
        myQueue = []
        node = root
        myQueue.append(node)
        while myQueue:
            node = myQueue.pop(0)
            print node.elem,
            if node.lchild != None:
                myQueue.append(node.lchild)
            if node.rchild != None:
                myQueue.append(node.rchild)


if __name__ == '__main__':
    """主函数"""
    elems = range(10)           #生成十个数据作为树节点
    tree = Tree()          #新建一个树对象
    for elem in elems:                  
        tree.add(elem)           #逐个添加树的节点

    print '队列实现层次遍历:'
    tree.level_queue(tree.root)

    print '\n\n递归实现先序遍历:'
    tree.front_digui(tree.root)
    print '\n递归实现中序遍历:' 
    tree.middle_digui(tree.root)
    print '\n递归实现后序遍历:'
    tree.later_digui(tree.root)

    print '\n\n堆栈实现先序遍历:'
    tree.front_stack(tree.root)
    print '\n堆栈实现中序遍历:'
    tree.middle_stack(tree.root)
    print '\n堆栈实现后序遍历:'
    tree.later_stack(tree.root)
