'''
一 常用模块
###################################################################
1.sys模块
  sys.argv 命令行输入
    eg:python中的sys模块就是传入命令行非常方便 执行python 1.py case1 case2 case3时，python中sys.argv[1]=case1，sys.argv[2]=case2以此类推
  sys.platform 当前平台
    eg:print sys.platform结果为win32
  sys.path 模块的搜索路径
    eg:sys.path.append("dfdf"):对于模块和自己写的程序不在同一个目录下，可以把模块的路径通过sys.path.append(路径)添加到程序中。
    经典用法：
            CONF_PATH = os.path.dirname(os.path.abspath(__file__)) + "/../conf/"
            sys.path.append(CONF_PATH)
  sys.stdout 标准输出 :重定向的时候要注意先保存标准输出流,print==sys.stdout.write("dfdfd"\n)
  eg:
    import sys
    savedStdout = sys.stdout  #保存标准输出流
    with open('out.txt', 'w+') as file:
        sys.stdout = file  #标准输出重定向至文件
        print 'This message is for file!'

    sys.stdout = savedStdout  #恢复标准输出流
    print 'This message is for screen!'   
 
 sys.stdin 标准输入 
  eg:
    for line in sys.stdin:
       print line
 sys.exit()
##################################################################
2.os模块
  1  os.name      #显示当前使用的平台
      >>> os.name
      'nt'                  #这表示Windows
      >>> os.name
      'posix'             #这表示Linux
  2  os.getcwd()      #显示当前python脚本工作路径
  3  os.listdir('dirname')        #返回指定目录下的所有文件和目录名
  4  os.remove('filename')       #删除一个文件
  5  os.makedirs('dirname/dirname')     #可生成多层递规目录
  6  os.rmdir('dirname')     #删除单级目录
  8  os.system()    #运行shell命令,注意：这里是打开一个新的shell，运行命令，当命令结束后，关闭shell
        >>> os.system('pwd')
            /root/hahaha
  9  os.path.abspath(path)    #显示当前绝对路径
  10  os.path.dirname(path)    #返回该路径的父目录
  11  os.path.join(path,name)   #连接目录与文件名或目录 结果为path/name
    >>> os.path.join('/root/haha','test')
    '/root/haha/test'
  12 os.chdir(path): 方法用于改变当前工作目录到指定的路径。
  13 os.path.exists(path)
######################################################################
3.re模块
  Python特别设计了原始字符串(raw string)，需要提醒你的是，在写文件路径的时候就不要使用raw string了，这里存在陷阱。
  raw string就是用'r'作为字符串的前缀，如 r"\n"：表示两个字符"\"和"n"，而不是换行符了。Python中写正则表达式时推荐使用这种形式。
  
  二、正则表达式元字符说明：
    .    匹配除换行符以外的任意字符
    ^    匹配字符串的开始
    $    匹配字符串的结束
    []   用来匹配一个指定的字符类别
    ？   对于前一个字符字符重复0次到1次
    *对于前一个字符重复0次到无穷次
    {}   对于前一个字符重复m次
    {m，n} 对前一个字符重复为m到n次
    \d   匹配数字，相当于[0-9]
    \D   匹配任何非数字字符，相当于[^0-9]
    \s   匹配任意的空白符，相当于[ fv]
    \S   匹配任何非空白字符，相当于[^ fv]
    \w   匹配任何字母数字字符，相当于[a-zA-Z0-9_]
    \W   匹配任何非字母数字字符，相当于[^a-zA-Z0-9_]
    \b   匹配单词的开始或结束
  re方法：
   re.compile 可以把正则表达式编译成一个正则对象
   re.findall 在目标字符串查找符合规则的字符串
   re.search 函数会在字符串内查找模式匹配，只到找到第一个匹配然后返回，如果字符串没有匹配，则返回None。
   re.match 尝试从字符串的开始匹配一个模式，也等于说是匹配第一个单词
   注意：re.match与re.search的区别：re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；
   而re.search匹配整个字符串，直到找到一个匹配。
   
    Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先使用re.compile()函数，将正则表达式的字符串形式编译为Pattern实例，
    然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。
      eg：
      import re
      pattern = re.compile('[a-zA-Z]')
      result = pattern.findall('as3SiOPdj#@23awe')
      print result
      # ['a', 's', 'S', 'i', 'O', 'P', 'd', 'j', 'a', 'w', 'e']
    re.sub(pattern, repl, string, count)
    re.sub用于替换字符串中的匹配项。将字符串中的pattern换成repl
    
    检索和替换

Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。

语法：

re.sub(pattern, repl, string, count=0, flags=0)
参数：
    pattern : 正则中的模式字符串。
    repl : 替换的字符串，也可为一个函数。
    string : 要被查找替换的原始字符串。
    count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。

#!/usr/bin/python
# -*- coding: UTF-8 -*-
 
import re
 
phone = "2004-959-559 # 这是一个国外电话号码"
 
# 删除字符串中的 Python注释 
num = re.sub(r'#.*$', "", phone)
print "电话号码是: ", num
 
# 删除非数字(-)的字符串 
num = re.sub(r'\D', "", phone)
print "电话号码是 : ", num


pattern:讲解：
(pattern) 	匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘\(’ 或 ‘\)’。
(?:pattern) 	匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。
(?=pattern) 	正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?=95|98|NT|2000)’ 能匹配 “Windows 2000″ 中的 “Windows” ，但不能匹配 “Windows 3.1″ 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
(?!pattern) 	负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95|98|NT|2000)’ 能匹配 “Windows 3.1″ 中的 “Windows”，但不能匹配 “Windows 2000″ 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始
捕获应用实例：http://www.cnblogs.com/tk091/p/3702307.html
######################################################################
4.random模块
  random.random()用于生成一个0到1的随机符点数: 0 <= n < 1.0
  random.randint()的函数原型为：random.randint(a, b)，用于生成一个指定范围内的整数。
                  其中参数a是下限，参数b是上限，生成的随机数n: a <= n <= b
  random.choice(["JGood","is","a","handsome","boy"])从序列中获取一个随机元素
  random.sample的函数原型为：random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列
  random.shuffle的函数原型为：random.shuffle(x[, random])，用于将一个列表中的元素打乱。
      eg: p=["Python","is","powerful","simple","andsoon..."]
          random.shuffle(p)
          printp
          #----结果（不同机器上的结果可能不一样。）
          #['powerful','simple','is','Python','andsoon...']
######################################################################
5.logging模块
日志级别大小关系为：CRITICAL > ERROR > WARNING > INFO > DEBUG > NOTSET，当然也可以自己定义日志级别。
DEBUG：详细的信息,通常只出现在诊断问题上
INFO：确认一切按预期运行
WARNING：一个迹象表明,一些意想不到的事情发生了,或表明一些问题在不久的将来(例如。磁盘空间低”)。这个软件还能按预期工作。
ERROR：更严重的问题,软件没能执行一些功能
CRITICAL：一个严重的错误,这表明程序本身可能无法继续运行
这5个等级，也分别对应5种打日志的方法： debug 、info 、warning 、error 、critical。默认的是WARNING，当在WARNING或之上时才被跟踪。

通过logging.basicConfig函数对日志的输出格式及方式做相关配置
import logging
logging.basicConfig(level=logging.DEBUG,
                format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                datefmt='%a, %d %b %Y %H:%M:%S',
                filename='myapp.log',
                filemode='w')
    
logging.debug('This is debug message')
logging.info('This is info message')
logging.warning('This is warning message')

./myapp.log文件中内容为:
Sun, 24 May 2009 21:48:54 demo2.py[line:11] DEBUG This is debug message
Sun, 24 May 2009 21:48:54 demo2.py[line:12] INFO This is info message
Sun, 24 May 2009 21:48:54 demo2.py[line:13] WARNING This is warning message

logging.basicConfig函数各参数:
filename: 指定日志文件名
filemode: 和file函数意义相同，指定日志文件的打开模式，'w'或'a'
format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:
 %(levelno)s: 打印日志级别的数值
 %(levelname)s: 打印日志级别名称
 %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]
 %(filename)s: 打印当前执行程序名
 %(funcName)s: 打印日志的当前函数
 %(lineno)d: 打印日志的当前行号
 %(asctime)s: 打印日志的时间
 %(thread)d: 打印线程ID
 %(threadName)s: 打印线程名称
 %(process)d: 打印进程ID
 %(message)s: 打印日志信息
datefmt: 指定时间格式，同time.strftime()
level: 设置日志级别，默认为logging.WARNING
stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，
默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略

第二种方法
 import logging  
  
# 创建一个logger    
logger = logging.getLogger()  
  
logger1 = logging.getLogger('mylogger')  
logger1.setLevel(logging.DEBUG)  
  
logger2 = logging.getLogger('mylogger')  
logger2.setLevel(logging.INFO)  
  
logger3 = logging.getLogger('mylogger.child1')  
logger3.setLevel(logging.WARNING)  
  
  
  
# 创建一个handler，用于写入日志文件    
fh = logging.FileHandler('/tmp/test.log')  
  
# 再创建一个handler，用于输出到控制台    
ch = logging.StreamHandler()  
  
# 定义handler的输出格式formatter    
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')  
fh.setFormatter(formatter)  
ch.setFormatter(formatter)  
  
#定义一个filter  
#filter = logging.Filter('mylogger.child1.child2')  
#fh.addFilter(filter)    
  
# 给logger添加handler    
#logger.addFilter(filter)  
logger.addHandler(fh)  
logger.addHandler(ch)  
  
  
  
# 记录一条日志    
logger.debug('logger debug message')  
logger.info('logger info message')  
logger.warning('logger warning message')  
logger.error('logger error message')  
logger.critical('logger critical message')  
  

######################################################################

'''
文件操作
工作模式
      ‘r’模式:以读方式打开，不能进行写操作，文件必须是已经存在的
      ‘r+’模式：以读写方式打开，文件必须是已经存在的
      ‘w’模式：以写方式打开，不能进行读操作，若文件存在，则先清空，然后重新创建；若不存在，则创建文件
      ‘w+’模式：以读写方式打开，若文件存在，则先清空，然后重新创建；若不存在，则创建文件
      ‘a’模式：以追加方式打开，不能进行读操作，把数据追加到文件的末尾；若不存在，则创建文件
      ‘a+’模式：以读写方式打开，把数据追加到文件的末尾；若不存在，则创建文件
      ‘b’模式：以二进制模式打开，不能作为第一个字符出现，需跟以上模式组合使用，
1.读取写入文件
  python中有三个方法来处理文件内容的输入：
    read() 一次读取全部的文件内容。
    readline() 每次读取文件的一行。
    readlines() 读取文件的所有行，返回一个字符串列表。
    因为read（）和readlines（）是一次性把文件加载到内存， 如果文件较大， 甚至比内存的大小还大， 内存就会爆掉。 
    所以，这两种方法只适合读取小的文件。 实际工作中，会碰到读取10几G的大文件的需求， 比如说日志文件。 这时候就要用的新的读取文件的方法。 
    这里提供两种方法， 有简单，有复杂，但基本原理都是一样的。 就是利用到生成器generator。 
   
    f=open("path","r/w/a+")
    kk=f.read()
    print kk
    f.close()
 2.多行写入  
   l = ['\nhello dear!','\nhello son!','\nhello baby!\n']
   f = open('/tmp/test.txt','a')
   f.writelines(l)
   f.close()
##一次性往文件中写入多行##############################
    '''
    list=['1    nihao  com.com','nidaye','sfdsfsdf']
    path="D:\pythonCode/4.txt"
    f=open(path,'w')
    f.seek(0)
    for line in list:
        f.writelines(line+'\n')
    f.close()
    '''
###################################################
#如何判断一个文件有多少行#############################
    '''
    path="D:\pythonCode/4.txt"
    length=len(open(path).readlines())
    print length
    '''
##################################################
#读取一个.txt文件中的内容，按要求取得所需要的内容######
    """
    def main():
        print 'dkkdfd'
        path="D:\pythonCode/2.txt"
        comts=read_comts(path)
        print comts

    def read_comts(comt_dir):
        comts = {}
        context={}
        try:
            with open(comt_dir) as read_file:
                for line in read_file:
                    splits=line.split('\t')
                    if(len(splits)<2):
                        continue
                    comtid, content = splits[:2]
                    comts[comtid]=1
                    context[comtid]=content
        except IOError:
            raise Exception('read comt file %s failed' % comt_dir)
        return comts,context

    if __name__ == '__main__':
        main()
    """
   ##########################################
    注意：python中获取中文要注意编码与解码问题
    def get_chinese(string, encoding='utf-8'):
   
    try:
        string = string.decode(encoding)
    except UnicodeDecodeError as error:
        return ''

    chinese = u'[\u4e00-\u9fa5A-Za-z]+'
    pattern = re.compile(chinese)
    result_list =  pattern.findall(query)
    result_list_middle = []
    for key in result_list:
        try:
            mid = key.encode(encoding)
            result_list_middle.append(mid)
        except UnicodeError as error:
            continue 
    return ' '.join(result_list_middle)//用空格将列表连接起来
    
    ############################################
###################################################
   
'''
##########################################################
'''
  切片详解：
  li = [1,2,3,4,5,6,7]
  print li[1:]           #输出[2,3,4,5,6,7]，省略终止索引，表示取起始索引之后的所有值，等效于li[1:len(li)]
  print li[:3]           #输出[1,2,3]，省略起始索引，表示从0开始取，等效于li[0:3]
  print li[:]            #输出[1,2,3,4,5,6,7]，省略起始索引、终止索引、步长值表示取全部，等效于li[0:len(li):1]
  print li[::]           #输出[1,2,3,4,5,6,7]，省略起始索引、终止索引、步长值表示取全部，等效于li[0:len(li):1]
  print li[::-1]        #输出[7,6,5,4,3,2,1]，省略起始索引、终止索引，步长值为-1，表示反向获取
  
  注：在切片运算中，步长为正，表示从左至右，按照索引值与起始位置索引之差可以被步长整除的规律取值；当步长为负，则表示从右至左，按照
  按照索引值与起始位置索引之差可以被步长整除的规律取值。
  根据这个特性，我们可以很方便对某个序列进行倒序取值，这个方法比reverse方法更方便，且适用于没有reverse方法的字符串和元组。
'''
##########################################################
'''
1.列表
  不用声明可以直接使用，并且一个数组中可以存储多种不同的数据类型（包括另外的列表，元组，字典）
  a=['1','2','3']
    list.remove(value)  删除指定的值
    list.pop()  删除末尾的值
    list.insert(index,value) 在指定位置插入值 
    list.reverse() 翻转数组
    list.append(value)  在数组末尾追加一个值
    list.extend(list1)  在数组末尾追加另一个数组
    list.sort() 
   	   sorted: print sorted([5, 2, 3, 1, 4]) 结果：[1, 2, 3, 4, 5]
	   sort:L = [5, 2, 3, 1, 4]
	    	L.sort()
	    	print L
    sort()与sorted()的不同在于，sort是在原位重新排列列表，而sorted()是产生一个新的列表。
  判断数据类型：
    a = 111
    isinstance(a, int)
    True
    
 2.字典
    字典的两个重要特性：
      1.不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住。
      2.键必须不可变，所以可以用数，字符串或元组充当，所以用列表就不行   
        eg:dict = {['Name']: 'Zara', 'Age': 7} print dict['Name']
      删除操作：
        del dict['Name']; # 删除键是'Name'的条目
        dict.clear();     # 清空词典所有条目
        del dict ;        # 删除词典
      常用方法：
      1、radiansdict.clear()：删除字典内所有元素
      2、radiansdict.copy()：返回一个字典的浅复制
      3、radiansdict.fromkeys()：创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
      4、radiansdict.get(key, default=None)：返回指定键的值，如果值不在字典中返回default值
      5、radiansdict.has_key(key)：如果键在字典dict里返回true，否则返回false
      6、radiansdict.items()：以列表返回可遍历的(键, 值) 元组数组
      7、radiansdict.keys()：以列表返回一个字典所有的键
      8、radiansdict.setdefault(key, default=None)：和get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为default
      9、radiansdict.update(dict2)：把字典dict2的键/值对更新到dict里
      10、radiansdict.values()：以列表返回字典中的所有值
      
  3.字符串
     string.count(str, beg=0, end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出
                                               现的次数
     string.endswith(obj, beg=0, end=len(string)) 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，
                                                  如果是，返回 True,否则返回 False.
     string.find(str, beg=0, end=len(string)) 检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定
                                              范围内，如果是返回开始的索引值，否则返回-1
     string.index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在 string中会报一个异常.
     string.join(seq) 以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
     string.replace(str1, str2,  num=string.count(str1)) 把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.
     string.strip()去掉两端的
     string.split()分个字符串并返回list
     max(str)返回字符串 str 中最大的字母。
     min(str)返回字符串 str 中最小的字母。
     string.lower()
     string.upper()
     string.decode(encoding='UTF-8', errors='strict')
            以encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ，
            除非 errors 指 定 的 是 'ignore' 或 者'replace'
     string.encode(encoding='UTF-8', errors='strict')
	          以encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，
            除非 errors 指定的是'ignore'或者'replace'
'''
##########################################################
'''
无参装饰器：
    def deco(func):
      def _deco():
        print 'before addd'
        func()
        print 'after addd'
      return _deco
   
    @deco
    def myfunc():
      print 'lallalal'

    myfunc()

有参数装饰器：
def deco(arg):
  def _deco(func):
    def __deco():
      print '1'
      func()
      print '2'
    return __deco
  return _deco

@deco("hello")
def myfunc():
  print 'nihao'

myfunc()

函数参数传递装饰器：
def deco(arg):
  def _deco(func):
    def __deco(str):
      print '1'
      func(str)
      print '2'
    return __deco
  return _deco

@deco("hello")
def myfunc(str):
  print 'nihao',str 

myfunc("lala")
'''
######################################################################
#技巧：
1.def INDENT_OUTPUT(depth, msg):
	return ''.join(['    ' for i in range(0, depth)]) + msg
2.生成器用法
l=max((len(i) for i in ['123','nihao']))
print l
######################################################################
爬虫相关
requests库
requests.get()
requests.post()
requests.patch()
requests.delete()

r.status_code
r.raise_for_status()
r.encoding
r.apparent_encoding
r.content()
r.headers

try:
   r=requests.get()
   r.raise_for_status()
   r.encoding=r.apparent_encoding
   return r.text
except:
   return 'cuowu'

from bs4 import requests 美丽汤库
soup=BeautifulSoup(r.text,"html.parser")
