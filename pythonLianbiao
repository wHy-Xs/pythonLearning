# coding=UTF-8
class Node():
    #初始化节点，节点包括数据和指针域
    def __init__(self,item):
        self.data = item     #数据域
        self.nextsite = None #指针域

    #获得指向下一个节点的指针
    def getNext(self):
        return self.nextsite

    #获得数据
    def getItem(self):
        return self.data

    #设置节点的数据
    def setItem(self,newitem):
        self.data = newitem

    #设置节点的指针域
    def setNext(self,nextadress):
        self.nextsite = nextadress
'''
作为一个链表，首先要节点（数据域+指针域），链表就是通过在指针域存放下一个节点的地址，所以需要
一个获取下一个地址的方法getNext()方法，同时还需要设置地址的方法，同理，还需要设置数据和得到
数据的方法。这就是节点中包含的所有信息
'''


'''
    链表类
'''
class lianbiao():

    '''初始化函数 '''
    def __init__(self):
        self.head=None

    '''
        判断链表为空：如果头节点指向第一个节点，如果头节点为None，则说明链表为空
    '''
    def isEmpty(self):
        return self.head==None

    '''
       遍历输出链表所有元素：首先current = self.head,然后遍历依次输出
    '''
    def travel(self):
        current=self.head
        while current!=None:
            print current.getItem()
            current=current.getNext()

    '''
        链表长度：想知道链表的长度只要在遍历链表的时候增加一个cout计数就可以
    '''
    def size(self):
        current=self.head
        count=0
        while current!=None:
            count+=1
            current=current.getNext()
        return count

    '''
        在链表的头节点出增加一个新节点：首先拿到这个新加节点，然后将新节点的nextsize指向头节点指向的节点，最后在叫头节点指向新节点
    '''
    def add(self,item):
        tmp=Node(item)
        tmp.setNext(self.head)
        self.head=tmp

    '''
        在链表的尾部增加一个新节点：首先我们要判断链表是否为空，如果为空直接在在头节点插入即可
        如果不是空的话，直接遍历到最后一个然后改变指向
    '''
    def append(self,item):
        tmp=Node(item)
        if self.isEmpty():
            self.head=tmp
        else:
            current=self.head
            while current.getNext()!=None: #遍历容易出错，注意current与current.getNext()的区别
                current=current.getNext()
            current.setNext(tmp)

    '''
        找出指定元素在链表中的位置：首先有个计数count，然后有个found的标志位
         while current不为空值并且not found为真：（found位是为了跳出循环，如果没有则一直循环）
            如果找到了：found=true
            如果没找到：指向下一位
         如果found=true:
            就返回count
         如果found=false:
            没找到          
    '''
    def index(self,item):
        current=self.head
        count=0
        found=None
        while current!=None and not found:
          count+=1
          if current.getItem()==item:
            found=True
          else:
            current=current.getNext()
        if found:
          return count
        else:
          raise ValueError,'%s is not in linkedlist'%item
    
     '''
        查看item是否存在于链表中，代码基本与index重复
     '''
    def check(self,item):
        current=self.head
        found=False
        while current!=None and not found:
            if current.getItem()==item:
                found=True
            else:
                current=current.getNext()
        return found
   
    '''
        向链表中添加新节点（非头节点非尾节点）:首先判断是否在头节点或者在末尾添加，如果不是在遍历添加
    '''
    def insert(self,locate,item):
       if locate<=1:
           self.add(item)
       elif locate>self.size():
           self.append(item)
       else:
           current=self.head
           pre=None
           count=0
           tmp=Node(item)
           while count<locate:
               count+=1
               pre=current
               current=current.getNext()
           pre.setNext(tmp)
           tmp.setNext(current)
    
    '''
        删除指定节点：进入遍历循环
                如果找到了：
                    是链表第一个元素：
                        改变指向
                    并且不是第一个：
                        改变指向
                如果没有找到：
                    指向下一个
    '''
    def remove(self,item):
         current=self.head
         pre=None
         while current!=None:
             if current.getItem()==item:
                 if not pre:
                    self.head=current.getNext()
                 else:
                     pre.setNext(current.getNext())
                 break
             else:
                 pre=current
                 current=current.getNext()

if __name__=='__main__':
      a=lianbiao()
      for i in range(1,10):
          a.append(i)
      a.add(2)

      print a.size()
      a.travel()
      print 'ddddddddddddddddd'
      print a.index(2)
      print a.check(4)
      a.insert(4,888)
      a.travel()
      print a.check(6)
      print a.index(5)
      a.remove(4)
      a.travel()
      a.insert(4,100)
      a.travel()
##########################################
##########单链表的翻转#####################
'''
一般有两种方法：1.普通的迭代 2.通过递归
'''
#1.迭代方法
class Node(object):
    def __init__(self):
        self.value = None
        self.next = None

    def __str__(self):
        return str(self.value)

def reverse_loop(head):
    if not head or not head.next:
        return head
    pre = None  
    while head:
        next = head.next   # 缓存当前节点的向后指针，待下次迭代用
        head.next = pre    # 这一步是反转的关键，相当于把当前的向前指针作为当前节点的向后指针
        pre = head         # 作为下次迭代时的（当前节点的）向前指针
        head = next        # 作为下次迭代时的（当前）节点
    return pre             # 返回头指针，头指针就是迭代到最后一次时的head变量（赋值给了pre）
    
if __name__ == '__main__':

    three  = Node()
    three.value = 3

    two = Node()
    two.value = 2
    two.next = three

    one = Node()
    one.value = 1
    one.next = two

    head = Node()
    head.value = 0
    head.next = one

    newhead = reverse_loop(head)
    while newhead:
        print(newhead.value, )
        newhead = newhead.next
        
'''
这种方法就是一个一个翻转，总体思路：pre为保存前一个节点，head为头节点，tmp保存下一个节点。
流程：首先拿到tmp（下一个节点），
      然后将当前的节点指向上一个节点，
      然后将上一个节点pre向下移动一位，
      同时将头节点指向下一个节点转移到
'''
##############################################
#2.递归
def reverse_recursion(head):
    if not head or not head.next:
        return head

    new_head = reverse_recursion(head.next)

    head.next.next = head #就是头节点指向的下一个节点的指向头节点
    head.next = None   #同时将头节点指向None
    return new_head     #返回头节点
'''
递归的方法非常简洁，但是效率不高。这种方法用的不熟练





__author__ = 'jiangzhiheng'
#coding=utf-8
import copy


class node():                             #定义一个节点类
    def __init__(self,val,p=0):
        self.data = val
        self.next = p

class linklist():
    def __init__(self):

        self.head = 0

    def initlist(self,data):

        self.head = node(data[0])
        p = self.head
        for i in data[1:]:
            p.next = node(i)
            p = p.next


    def getlength(self):       #获得链表元素的个数

        p = self.head
        length = 0
        while p!=0:
            length+=1
            p = p.next

        return length

    def insert(self,item,index):

        if index>self.getlength() or index<=0:
            print('please enter a valid index')
            return
        p = self.head
        q = node(item)
        while (index-1)!=0:        #在第index后面插入对象item
            index=index-1
            p = p.next
        post = copy.deepcopy(p.next)
        p.next = q
        q.next = post

    def getitem(self,index):

        if index>self.getlength() or index<=0:
            print('please enter a valid index')
            return
        p = self.head
        while (index-1)!=0:
            index=index-1
            p = p.next
        return p.data         #返回链表第index个对象的值

    def remove(self,index):

        if index>self.getlength() or index<=0:
            print('please enter a valid index')
            return
        p = self.head
        if index == 1:
            self.head = p.next
            return
        while (index-2)!=0:           #移除链表中的第index对象
            index=index-1
            p = p.next
        p.next = p.next.next

    def search(self,item):      #在链表中搜索对象item
        p = self.head
        i = 1
        while p!=0:
           if p.data == item:
               return i
           i+=1
           p = p.next


l = linklist()
l.initlist(range(7))
print(l.getlength())
l.insert(10,5)
print(l.getitem(6))
l.remove(5)
print(l.search(5))
i = 1
while i<l.getlength():
    print(l.getitem(i)),
    i+=1



"""
def rotatestring(s,offset):
	n=len(s)
	offset=offset%n
	for i in range(offset):
		t=s.pop()
		s.insert(0,t)
	return s

k=rotatestring(["a","b","c","d","e","f"],2)
print k


"""
"""
def reverseWords(s):  
        cur = 0  
        n = len(s)  
        result = ''  
        while cur != n:  
            temp = ''  
            while cur != n and s[cur] == ' ':  
                cur += 1  

            while cur != n and s[cur] != ' ':  
                temp += s[cur]  
                cur += 1  
            if len(result) != 0 and len(temp) != 0:  
                result = temp + ' ' + result  
            elif len(temp) != 0:  
                result = temp  

	return result

k=reverseWords("nihao wo shi ni")
print k
"""
